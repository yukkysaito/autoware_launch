<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Essential parameters -->
  <arg name="map_path" description="point cloud and lanelet2 map directory path"/>
  <arg name="vehicle_model"/>
  <arg name="sensor_model"/>
  <!-- Optional parameters -->
  <arg name="rviz" default="true" description="launch rviz"/>
  <arg name="rviz_config" default="$(find-pkg-share autoware_launch)/rviz/autoware.rviz" description="rviz config"/>
  <arg name="lanelet2_map_file" default="lanelet2_map.osm" />
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" />
  <!-- Optional parameters for scenario simulation -->
  <arg name="initial_engage_state" default="true"/>
  <arg name="perception/enable_detection_failure" default="true"/>
  <arg name="perception/enable_object_recognition" default="false"/>
  <arg name="sensing/visible_range" default="300.0"/>
  <arg name="scenario_simulation" default="false"/>

  <!-- Vehicle -->
  <include file="$(find-pkg-share vehicle_launch)/launch/vehicle.launch.xml">
    <arg name="vehicle_model" value="$(var vehicle_model)"/>
    <arg name="sensor_model" value="$(var sensor_model)"/>
    <arg name="vehicle_param_file" value="$(find-pkg-share $(var vehicle_model)_description)/config/vehicle_info.param.yaml"/>
    <arg name="simulation" value="true"/>
    <arg name="scenario_simulation" value="$(var scenario_simulation)"/>
    <arg name="initial_engage_state" value="$(var initial_engage_state)"/>
  </include>

  <!-- System -->
  <include file="$(find-pkg-share system_launch)/launch/system.launch.xml">
    <arg name="run_mode" value="planning_simulation"/>
  </include>

  <!-- Map -->
  <include file="$(find-pkg-share map_launch)/launch/map.launch.xml">
    <arg name="lanelet2_map_path" value="$(var map_path)/$(var lanelet2_map_file)" />
    <arg name="pointcloud_map_path" value="$(var map_path)/$(var pointcloud_map_file)"/>
  </include>

  <!-- Dummy Perception -->
  <include file="$(find-pkg-share dummy_perception_publisher)/launch/dummy_perception_publisher.launch.xml">
    <arg name="real" value="$(var perception/enable_detection_failure)"/>
    <arg name="disable_dummy_perception_publisher_node" value="$(var scenario_simulation)"/>
    <arg name="use_object_recognition" value="$(var perception/enable_object_recognition)"/>
    <arg name="visible_range" value="$(var sensing/visible_range)"/>
  </include>

  <!-- Planning -->
  <include file="$(find-pkg-share planning_launch)/launch/planning.launch.xml">
  </include>

  <!-- Control -->
  <include file="$(find-pkg-share control_launch)/launch/control.launch.py">
    <!-- options for lateral_controller_mode: mpc_follower, pure_pursuit -->
    <arg name="lateral_controller_mode" value="mpc_follower" />
  </include>

  <!-- AutowareAPI -->
  <include file="$(find-pkg-share awapi_awiv_adapter)/launch/awapi_awiv_adapter.launch.xml" />

  <!-- Rviz -->
  <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_config) -s $(find-pkg-share autoware_launch)/rviz/image/autoware.png" if="$(var rviz)">
    <param name="use_sim_time" value="$(env AW_ROS2_USE_SIM_TIME false)"/>
  </node>

  <!-- Web Controller -->
  <include file="$(find-pkg-share autoware_web_controller)/launch/autoware_web_controller.launch.xml" unless="$(var scenario_simulation)"/>

  <!-- Clock Publisher For Rosbag -->
  <!-- TODO(mitsudome-r): remove this after ROSBAG2 can automatically record clock -->
  <include file="$(find-pkg-share clock_publisher)/launch/clock_publisher.launch.xml" />
</launch>
